// backend/jobs/scheduleMetrics.js
import cron from 'node-cron';
import metricsAggregator from '../services/metricsAggregator.js';

/**
 * Programador de tareas para ejecutar agregaciones de m√©tricas
 * Ejecuta diariamente a las 2:00 AM para no interferir con el tr√°fico de usuarios
 */
class MetricsScheduler {
  constructor() {
    this.isRunning = false;
    this.lastRun = null;
    this.nextRun = null;
  }

  /**
   * Inicia el programador de m√©tricas
   */
  start() {
    console.log('üïí Iniciando programador de m√©tricas...');
    
    // Ejecutar agregaci√≥n diaria a las 2:00 AM
    cron.schedule('0 2 * * *', async () => {
      await this.runDailyAggregation();
    }, {
      scheduled: true,
      timezone: "America/Argentina/Buenos_Aires" // Ajustar seg√∫n la zona horaria de la aplicaci√≥n
    });

    // Ejecutar agregaci√≥n semanal los domingos a las 3:00 AM
    cron.schedule('0 3 * * 0', async () => {
      await this.runWeeklyAggregation();
    }, {
      scheduled: true,
      timezone: "America/Argentina/Buenos_Aires"
    });

    // Ejecutar limpieza mensual el primer d√≠a del mes a las 4:00 AM
    cron.schedule('0 4 1 * *', async () => {
      await this.runMonthlyCleanup();
    }, {
      scheduled: true,
      timezone: "America/Argentina/Buenos_Aires"
    });

    // Tambi√©n permitir ejecuci√≥n manual para testing/debugging
    this.updateNextRunTime();
    console.log('‚úÖ Programador de m√©tricas iniciado exitosamente');
    console.log(`‚è∞ Pr√≥xima ejecuci√≥n: ${this.nextRun}`);
  }

  /**
   * Ejecuta la agregaci√≥n diaria de m√©tricas
   */
  async runDailyAggregation() {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è Agregaci√≥n ya en ejecuci√≥n, saltando...');
      return;
    }

    try {
      this.isRunning = true;
      this.lastRun = new Date();
      
      console.log('üöÄ Iniciando agregaci√≥n diaria de m√©tricas...');
      console.log(`üìÖ Timestamp: ${this.lastRun.toISOString()}`);
      
      const startTime = Date.now();
      
      // Ejecutar todas las agregaciones
      await metricsAggregator.generateAllMetrics();
      
      const duration = Date.now() - startTime;
      console.log(`‚úÖ Agregaci√≥n diaria completada en ${duration}ms`);
      
      // Actualizar pr√≥xima ejecuci√≥n
      this.updateNextRunTime();
      
      // Opcional: Enviar notificaci√≥n de √©xito (email, Slack, etc.)
      await this.notifySuccess('daily', duration);
      
    } catch (error) {
      console.error('‚ùå Error en agregaci√≥n diaria:', error);
      
      // Opcional: Enviar notificaci√≥n de error
      await this.notifyError('daily', error);
      
    } finally {
      this.isRunning = false;
    }
  }

  /**
   * Ejecuta agregaci√≥n semanal (m√°s intensiva)
   */
  async runWeeklyAggregation() {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è Agregaci√≥n ya en ejecuci√≥n, saltando agregaci√≥n semanal...');
      return;
    }

    try {
      this.isRunning = true;
      console.log('üöÄ Iniciando agregaci√≥n semanal de m√©tricas...');
      
      const startTime = Date.now();
      
      // Ejecutar agregaciones con mayor rango temporal
      await metricsAggregator.generateAllMetrics();
      
      // Ejecutar an√°lisis adicionales solo semanalmente
      await this.runAdvancedAnalytics();
      
      const duration = Date.now() - startTime;
      console.log(`‚úÖ Agregaci√≥n semanal completada en ${duration}ms`);
      
      await this.notifySuccess('weekly', duration);
      
    } catch (error) {
      console.error('‚ùå Error en agregaci√≥n semanal:', error);
      await this.notifyError('weekly', error);
    } finally {
      this.isRunning = false;
    }
  }

  /**
   * Ejecuta limpieza mensual de datos antiguos
   */
  async runMonthlyCleanup() {
    try {
      console.log('üßπ Iniciando limpieza mensual...');
      
      const startTime = Date.now();
      
      // Limpiar eventos muy antiguos (mantener solo 1 a√±o)
      const oneYearAgo = new Date();
      oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);
      
      const { Event } = await import('../config/eventModel.js');
      const deletedEvents = await Event.deleteMany({
        timestamp: { $lt: oneYearAgo }
      });
      
      console.log(`üóëÔ∏è Eliminados ${deletedEvents.deletedCount} eventos antiguos`);
      
      // Limpiar m√©tricas muy antiguas (mantener solo 6 meses)
      const sixMonthsAgo = new Date();
      sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
      
      const collections = [
        'metrics_top_yerbas',
        'metrics_flavor_notes', 
        'metrics_trends',
        'metrics_user_behavior',
        'metrics_discovery'
      ];
      
      for (const collectionName of collections) {
        const collection = metricsAggregator.metricsConn.db.collection(collectionName);
        const result = await collection.deleteMany({
          createdAt: { $lt: sixMonthsAgo }
        });
        console.log(`üóëÔ∏è Eliminados ${result.deletedCount} documentos de ${collectionName}`);
      }
      
      const duration = Date.now() - startTime;
      console.log(`‚úÖ Limpieza mensual completada en ${duration}ms`);
      
    } catch (error) {
      console.error('‚ùå Error en limpieza mensual:', error);
    }
  }

  /**
   * Ejecuta an√°lisis avanzados (solo semanalmente para no sobrecargar)
   */
  async runAdvancedAnalytics() {
    console.log('üî¨ Ejecutando an√°lisis avanzados...');
    
    try {
      // An√°lisis de cohorts de usuarios
      // An√°lisis de tendencias estacionales
      // Detecci√≥n de anomal√≠as
      // etc.
      
      console.log('‚úÖ An√°lisis avanzados completados');
    } catch (error) {
      console.error('‚ùå Error en an√°lisis avanzados:', error);
    }
  }

  /**
   * Ejecuta agregaci√≥n manualmente (√∫til para testing)
   */
  async runManual() {
    console.log('üéØ Ejecutando agregaci√≥n manual...');
    await this.runDailyAggregation();
  }

  /**
   * Actualiza el tiempo de la pr√≥xima ejecuci√≥n
   */
  updateNextRunTime() {
    const now = new Date();
    const tomorrow = new Date(now);
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(2, 0, 0, 0); // 2:00 AM del siguiente d√≠a
    
    this.nextRun = tomorrow;
  }

  /**
   * Obtiene el estado del programador
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      lastRun: this.lastRun,
      nextRun: this.nextRun,
      uptime: process.uptime()
    };
  }

  /**
   * Notifica √©xito de la operaci√≥n
   */
  async notifySuccess(type, duration) {
    // Implementar notificaciones seg√∫n necesidades:
    // - Email
    // - Slack
    // - Dashboard interno
    // - Logs estructurados
    
    console.log(`üìß Notificaci√≥n: Agregaci√≥n ${type} exitosa (${duration}ms)`);
  }

  /**
   * Notifica error de la operaci√≥n
   */
  async notifyError(type, error) {
    // Implementar notificaciones de error seg√∫n necesidades:
    // - Email de alerta
    // - Slack con detalles
    // - Sistema de monitoreo
    // - Logs de error estructurados
    
    console.error(`üö® Notificaci√≥n: Error en agregaci√≥n ${type}:`, error.message);
  }

  /**
   * Detiene el programador
   */
  stop() {
    console.log('üõë Deteniendo programador de m√©tricas...');
    // node-cron no tiene un m√©todo expl√≠cito para detener todas las tareas
    // Pero se puede implementar si es necesario
  }
}

// Crear instancia singleton
const metricsScheduler = new MetricsScheduler();

// Auto-iniciar el programador cuando se importa el m√≥dulo
if (process.env.NODE_ENV !== 'test') {
  metricsScheduler.start();
}

export default metricsScheduler;
