import OpenAI from 'openai';
import dotenv from 'dotenv';

dotenv.config();

class OpenAIService {
  constructor() {
    if (!process.env.OPENAI_API_KEY) {
      console.warn('‚ö†Ô∏è OPENAI_API_KEY no est√° configurada. El servicio de IA no funcionar√°.');
      this.client = null;
      return;
    }

    this.client = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
  }

  /**
   * Interpretar prompt del usuario y convertirlo a caracter√≠sticas de yerba
   */
  async interpretYerbaRequest(userPrompt, userRole = 'basic') {
    if (!this.client) {
      throw new Error('OpenAI no est√° configurado. Verifica tu API key.');
    }

    if (userRole !== 'pro') {
      throw new Error('Esta funcionalidad est√° disponible solo para usuarios PRO.');
    }

    try {
      const systemPrompt = this.buildSystemPrompt();
      
      const completion = await this.client.chat.completions.create({
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: systemPrompt
          },
          {
            role: "user",
            content: userPrompt
          }
        ],
        max_tokens: 1000,
        temperature: 0.3, // M√°s determin√≠stico para respuestas consistentes
        response_format: { type: "json_object" }
      });

      const response = completion.choices[0].message.content;
      console.log('ü§ñ Respuesta de OpenAI:', response);

      // Parsear y validar la respuesta JSON
      let parsedResponse;
      try {
        parsedResponse = JSON.parse(response);
      } catch (parseError) {
        console.error('‚ùå Error parseando respuesta de OpenAI:', parseError);
        throw new Error('Error al interpretar la respuesta de la IA');
      }

      // Validar estructura de la respuesta
      const validatedResponse = this.validateAndCleanResponse(parsedResponse);
      
      return {
        success: true,
        interpretation: validatedResponse,
        originalPrompt: userPrompt,
        aiResponse: response,
        usage: {
          promptTokens: completion.usage.prompt_tokens,
          completionTokens: completion.usage.completion_tokens,
          totalTokens: completion.usage.total_tokens
        }
      };

    } catch (error) {
      console.error('‚ùå Error en OpenAI Service:', error);
      
      if (error.code === 'insufficient_quota') {
        throw new Error('L√≠mite de tokens agotado. Intenta m√°s tarde.');
      }
      
      if (error.code === 'rate_limit_exceeded') {
        throw new Error('Demasiadas solicitudes. Espera un momento.');
      }
      
      throw new Error(`Error de IA: ${error.message}`);
    }
  }

  /**
   * Construir el prompt del sistema para OpenAI
   */
  buildSystemPrompt() {
    return `Sos un sommelier experto en yerba mate. Tu tarea es interpretar el pedido en lenguaje natural de un usuario que busca una yerba espec√≠fica para tomar mate.

Deb√©s responder con un √∫nico objeto JSON v√°lido, que incluya **todas las caracter√≠sticas** que deber√≠a tener la yerba ideal para esa persona. Aunque el usuario no mencione expl√≠citamente una caracter√≠stica, **debes inferir la mejor opci√≥n posible** seg√∫n el pedido, tu conocimiento del mate, y las combinaciones m√°s habituales.

Us√° **solo los valores permitidos** para cada campo (listados abajo). No inventes nuevos t√©rminos. Complet√° todos los campos del JSON, no dejes ninguno vac√≠o.

Tu respuesta debe tener esta estructura:

{
  "tipo": string,                     // Una de: "Tradicional", "Suave", "Despalada", "Barbacu√°", "Compuesta", "Org√°nica", "Premium/Selecci√≥n", "Instant√°nea (soluble)", "Saquitos/Tea Bags"
  "containsPalo": string,            // "S√≠" o "No"
  "leafCut": string,                 // Una de: "Extra fina", "Fina", "Media", "Gruesa", "Canchada"
  "origen": string,                  // Una de: "Misiones", "Corrientes", "Entre R√≠os", "Rio Grande do Sul", "Paran√° (BR)", "Santa Catarina", "Itap√∫a", "Alto Paran√°", "Caazap√°", "Canindey√∫"
  "pais": string,                    // Una de: "Argentina", "Brasil", "Uruguay", "Paraguay"
  "secado": string,                  // Una de: "Barbacu√°", "A cintas (sapecado)", "Rotativo/T√∫nel", "Carij√≥ (indirecto a le√±a)"
  "tipoEstacionamiento": string,    // "Natural" o "Acelerado/Controlado"
  "tiempoEstacionamiento": string,  // Una de: "Sin estacionar (0-30 d√≠as)", "3-6 meses", "6-12 meses", "12-24 meses", ">24 meses"
  "produccion": string               // Una de: "Industrial", "Artesanal/Familiar", "Agroecol√≥gica", "Org√°nica certificada"
}
No agregues ning√∫n texto fuera del JSON. No expliques tus decisiones. Simplemente devolv√© el objeto completo con los 13 campos rellenados con los valores correctos.`;
  }

  /**
   * Validar y limpiar la respuesta de OpenAI
   */
  validateAndCleanResponse(response) {
    // Valores permitidos para cada campo
    const allowedValues = {
      tipo: ["Tradicional", "Suave", "Despalada", "Barbacu√°", "Compuesta", "Org√°nica", "Premium/Selecci√≥n", "Instant√°nea (soluble)", "Saquitos/Tea Bags"],
      containsPalo: ["S√≠", "No"],
      leafCut: ["Extra fina", "Fina", "Media", "Gruesa", "Canchada"],
      origen: ["Misiones", "Corrientes", "Entre R√≠os", "Rio Grande do Sul", "Paran√° (BR)", "Santa Catarina", "Itap√∫a", "Alto Paran√°", "Caazap√°", "Canindey√∫"],
      pais: ["Argentina", "Brasil", "Uruguay", "Paraguay"],
      secado: ["Barbacu√°", "A cintas (sapecado)", "Rotativo/T√∫nel", "Carij√≥ (indirecto a le√±a)"],
      tipoEstacionamiento: ["Natural", "Acelerado/Controlado"],
      tiempoEstacionamiento: ["Sin estacionar (0-30 d√≠as)", "3-6 meses", "6-12 meses", "12-24 meses", ">24 meses"],
      produccion: ["Industrial", "Artesanal/Familiar", "Agroecol√≥gica", "Org√°nica certificada"]
    };

    const allowedBrands = ["Amanda","Andresito","Aguantadora","CBS√©","Cachamate","Cruz de Malta","Kraus","La Merced","Ma√±anita","Mate Rojo","Nobleza Gaucha","Origen","Playadito","Pipor√©","Rosamonte","Tarag√ºi","Uni√≥n","Titrayj√∫","Kalena","Bar√£o de Cotegipe","Baldo","Rei Verde","Ximango","Yacuy","Mate Le√£o","Canarias","Sara","Del Cebador","Contigo","Baldo (UY)","Pajarito","Selecta","Kurupi","Campesino","Col√≥n","Guaran√≠","Ruvicha","La Rubia","Indega","Guayak√≠","Grapia Milenaria","Jesper","Mate Amos","Federal","Mateando"];

    const allowedEstablecimientos = ["Las Mar√≠as","Coop. Colonia Liebig","Coop. Yerba Andresito","Molinos La Misi√≥n","Coop. Agr√≠cola Ober√°","Hre√±uk S.A. (Rosamonte)","CBT (Playadito)","La Cachamate S.A.","Kraus S.A.","Ind√∫strias Bar√£o","Baldo S.A.","Rei Verde Industria de Erva-Mate","Sara S.A.","Pajarito S.R.L.","Selecta S.A.","Kurupi Laboratorios y Herbarios","Campesino S.A.","Guayak√≠ SRP","Mate Le√£o (Coca-Cola)","Santo Pip√≥ SCL","San Demetrio","La Cachuera","Carrau & Cia"];

    const cleaned = {
      tipo: allowedValues.tipo.includes(response.tipo) ? response.tipo : allowedValues.tipo[0],
      containsPalo: allowedValues.containsPalo.includes(response.containsPalo) ? response.containsPalo : allowedValues.containsPalo[0],
      leafCut: allowedValues.leafCut.includes(response.leafCut) ? response.leafCut : allowedValues.leafCut[0],
      origen: allowedValues.origen.includes(response.origen) ? response.origen : allowedValues.origen[0],
      pais: allowedValues.pais.includes(response.pais) ? response.pais : allowedValues.pais[0],
      secado: allowedValues.secado.includes(response.secado) ? response.secado : allowedValues.secado[0],
      tipoEstacionamiento: allowedValues.tipoEstacionamiento.includes(response.tipoEstacionamiento) ? response.tipoEstacionamiento : allowedValues.tipoEstacionamiento[0],
      tiempoEstacionamiento: allowedValues.tiempoEstacionamiento.includes(response.tiempoEstacionamiento) ? response.tiempoEstacionamiento : allowedValues.tiempoEstacionamiento[0],
      produccion: allowedValues.produccion.includes(response.produccion) ? response.produccion : allowedValues.produccion[0]
    };

    return cleaned;
  }

  /**
   * Obtener estad√≠sticas de uso del servicio
   */
  getUsageStats() {
    return {
      serviceEnabled: !!this.client,
      lastRequest: this.lastRequestTime || null,
      systemPromptVersion: '2.0-13fields'
    };
  }

  /**
   * Generar ejemplo de prompt para ayudar a los usuarios
   */
  getExamplePrompts() {
    return [
      "Quiero una yerba suave para tomar en la ma√±ana, sin mucho palo y que no sea muy amarga",
      "Busco algo intenso y duradero para estudiar, preferiblemente de Argentina",
      "Me gusta Amanda tradicional pero quiero probar algo similar de otra marca",
      "Necesito una yerba sin humo, tipo barbacu√°, que sea equilibrada y dure mucho",
      "Quiero algo tradicional de Misiones, con molienda media y bien estacionada",
      "Busco una yerba org√°nica, suave, ideal para principiantes",
      "Necesito algo fuerte tipo despalada para compartir en rondas largas"
    ];
  }
}

export default new OpenAIService();
