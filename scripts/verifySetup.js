// backend/scripts/verifySetup.js
/**
 * Script r√°pido para verificar que el sistema de eventos est√° correctamente configurado
 */

console.log('üîç Verificando configuraci√≥n del sistema de eventos...\n');

// Verificar importaciones
try {
  console.log('üì¶ Verificando importaciones...');
  
  const { default: Event } = await import('../config/eventModel.js');
  console.log('‚úÖ EventModel importado correctamente');
  
  const { default: EventTracker } = await import('../middleware/eventTracker.js');
  console.log('‚úÖ EventTracker importado correctamente');
  
  const { default: metricsAggregator } = await import('../services/metricsAggregator.js');
  console.log('‚úÖ MetricsAggregator importado correctamente');
  
  const { default: metricsScheduler } = await import('../jobs/scheduleMetrics.js');
  console.log('‚úÖ MetricsScheduler importado correctamente');
  
  console.log('\nüß™ Verificando funcionalidad b√°sica...');
  
  // Verificar que el modelo Event tiene los m√©todos necesarios
  if (typeof Event.createEvent === 'function') {
    console.log('‚úÖ Event.createEvent m√©todo disponible');
  } else {
    console.log('‚ùå Event.createEvent m√©todo NO disponible');
  }
  
  if (typeof Event.getAggregatedEvents === 'function') {
    console.log('‚úÖ Event.getAggregatedEvents m√©todo disponible');
  } else {
    console.log('‚ùå Event.getAggregatedEvents m√©todo NO disponible');
  }
  
  // Verificar EventTracker
  if (typeof EventTracker.trackEvent === 'function') {
    console.log('‚úÖ EventTracker.trackEvent m√©todo disponible');
  } else {
    console.log('‚ùå EventTracker.trackEvent m√©todo NO disponible');
  }
  
  // Verificar MetricsAggregator
  if (typeof metricsAggregator.generateAllMetrics === 'function') {
    console.log('‚úÖ MetricsAggregator.generateAllMetrics m√©todo disponible');
  } else {
    console.log('‚ùå MetricsAggregator.generateAllMetrics m√©todo NO disponible');
  }
  
  // Verificar MetricsScheduler
  if (typeof metricsScheduler.getStatus === 'function') {
    console.log('‚úÖ MetricsScheduler.getStatus m√©todo disponible');
  } else {
    console.log('‚ùå MetricsScheduler.getStatus m√©todo NO disponible');
  }
  
  console.log('\nüìã Estado del programador:');
  const status = metricsScheduler.getStatus();
  console.log(`   - Ejecut√°ndose: ${status.isRunning ? '‚úÖ' : '‚è∏Ô∏è'}`);
  console.log(`   - √öltima ejecuci√≥n: ${status.lastRun || 'Nunca'}`);
  console.log(`   - Pr√≥xima ejecuci√≥n: ${status.nextRun || 'No programada'}`);
  
  console.log('\n‚úÖ Verificaci√≥n completada exitosamente');
  console.log('\nüìù Pr√≥ximos pasos:');
  console.log('   1. Reiniciar el servidor para activar el tracking autom√°tico');
  console.log('   2. Ejecutar tests: node scripts/testEventSystem.js');
  console.log('   3. Verificar API de m√©tricas: GET /api/metrics/status');
  console.log('   4. Revisar logs para confirmar tracking de eventos');
  
} catch (error) {
  console.error('‚ùå Error en verificaci√≥n:', error.message);
  console.log('\nüîß Posibles soluciones:');
  console.log('   1. Verificar que todas las dependencias est√°n instaladas');
  console.log('   2. Comprobar que MongoDB est√° conectado');
  console.log('   3. Revisar logs de servidor para errores de importaci√≥n');
}

process.exit(0);
