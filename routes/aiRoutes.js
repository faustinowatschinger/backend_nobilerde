import express from 'express';
import openaiService from '../services/openaiService.js';
import { authenticateToken, requireRole } from '../auth/middleware/authMiddleware.js';

const router = express.Router();

/**
 * POST /api/ai/interpret-yerba
 * Interpretar prompt del usuario y convertirlo a caracter√≠sticas de yerba
 */
router.post('/interpret-yerba', authenticateToken, requireRole('pro'), async (req, res) => {
  try {
    const { prompt } = req.body;
    const userRole = req.userRole || 'basic';

    // Validar que el prompt est√© presente
    if (!prompt || typeof prompt !== 'string' || prompt.trim().length === 0) {
      return res.status(400).json({
        success: false,
        error: 'El prompt es requerido y debe ser un texto v√°lido'
      });
    }

    // Validar longitud del prompt
    if (prompt.length > 1000) {
      return res.status(400).json({
        success: false,
        error: 'El prompt no puede exceder 1000 caracteres'
      });
    }

    console.log(`ü§ñ Usuario ${req.userId} (${userRole}) solicita interpretaci√≥n de IA:`, prompt);

    // Interpretar el prompt con OpenAI
    const interpretation = await openaiService.interpretYerbaRequest(prompt, userRole);

    // Registrar el uso para estad√≠sticas (opcional)
    console.log(`‚úÖ Interpretaci√≥n exitosa para usuario ${req.userId}:`, {
      marca: interpretation.interpretation.marca,
      tipo: interpretation.interpretation.tipo,
      pais: interpretation.interpretation.pais,
      tokensUsed: interpretation.usage.totalTokens
    });

    res.json({
      success: true,
      data: interpretation,
      userInfo: {
        userId: req.userId,
        role: userRole
      }
    });

  } catch (error) {
    console.error('‚ùå Error en /ai/interpret-yerba:', error);
    
    // Manejar errores espec√≠ficos de OpenAI
    if (error.message.includes('usuarios PRO')) {
      return res.status(403).json({
        success: false,
        error: error.message
      });
    }

    if (error.message.includes('API key')) {
      return res.status(503).json({
        success: false,
        error: 'Servicio de IA temporalmente no disponible'
      });
    }

    if (error.message.includes('tokens') || error.message.includes('quota')) {
      return res.status(429).json({
        success: false,
        error: 'L√≠mite de uso alcanzado. Intenta m√°s tarde.',
        retryAfter: 3600 // 1 hora
      });
    }

    res.status(500).json({
      success: false,
      error: 'Error interno del servidor',
      message: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

/**
 * GET /api/ai/examples
 * Obtener ejemplos de prompts para ayudar a los usuarios
 */
router.get('/examples', authenticateToken, requireRole('pro'), (req, res) => {
  try {
    const examples = openaiService.getExamplePrompts();
    
    res.json({
      success: true,
      data: {
        examples,
        tips: [
          "S√© espec√≠fico sobre tus gustos (suave, intenso, con o sin palo)",
          "Menciona el momento del d√≠a si es relevante",
          "Incluye marcas que te gustan o regiones de origen",
          "Describe el tipo de yerba (tradicional, despalada, barbacu√°, etc.)",
          "Menciona si prefieres producci√≥n artesanal u org√°nica"
        ],
        availableFields: [
          "Tipo (Tradicional, Suave, Despalada, Barbacu√°, Compuesta, Org√°nica, etc.)",
          "Contenido de palo (S√≠, No)",
          "Corte de hoja (Extra fina, Fina, Media, Gruesa, Canchada)",
          "Origen geogr√°fico (Misiones, Corrientes, etc.)",
          "Pa√≠s (Argentina, Brasil, Uruguay, Paraguay)",
          "Tipo de secado (Barbacu√°, A cintas, Rotativo/T√∫nel, etc.)",
          "Tipo de estacionamiento (Natural, Acelerado/Controlado)",
          "Tiempo de estacionamiento (Sin estacionar, 3-6 meses, etc.)",
          "Producci√≥n (Industrial, Artesanal/Familiar, Org√°nica certificada)"
        ]
      }
    });

  } catch (error) {
    console.error('‚ùå Error en /ai/examples:', error);
    res.status(500).json({
      success: false,
      error: 'Error interno del servidor'
    });
  }
});

/**
 * GET /api/ai/status
 * Obtener estado del servicio de IA
 */
router.get('/status', authenticateToken, (req, res) => {
  console.log('üîç /ai/status - req.userId:', req.userId);
  console.log('üîç /ai/status - req.userRole:', req.userRole);
  console.log('üîç /ai/status - req.user:', req.user);
  
  try {
    const status = openaiService.getUsageStats();
    const userRole = req.userRole || 'basic';
    
    console.log('üîç /ai/status - userRole final:', userRole);
    
    res.json({
      success: true,
      data: {
        serviceAvailable: status.serviceEnabled,
        userRole,
        hasAccess: userRole === 'pro',
        systemVersion: status.systemPromptVersion,
        lastRequest: status.lastRequest
      }
    });

  } catch (error) {
    console.error('‚ùå Error en /ai/status:', error);
    res.status(500).json({
      success: false,
      error: 'Error interno del servidor'
    });
  }
});

/**
 * POST /api/ai/recommend
 * Buscar yerbas basado en las caracter√≠sticas interpretadas por IA
 */
router.post('/recommend', authenticateToken, requireRole('pro'), async (req, res) => {
  try {
    const { characteristics } = req.body;
    const userRole = req.userRole || 'basic';

    if (!characteristics) {
      return res.status(400).json({
        success: false,
        error: 'Las caracter√≠sticas son requeridas'
      });
    }

    // Importar el modelo de yerbas
    const { Yerba } = await import('../config/yerbasModel.js');

    // Construir query de b√∫squeda basado en las nuevas caracter√≠sticas
    let query = {};

    // Filtrar por marca espec√≠fica si se menciona
    if (characteristics.marca) {
      query.marca = characteristics.marca;
    }

    // Filtrar por tipo de yerba
    if (characteristics.tipo) {
      query.tipo = characteristics.tipo;
    }

    // Filtrar por contenido de palo
    if (characteristics.containsPalo) {
      query.containsPalo = characteristics.containsPalo === 'S√≠';
    }

    // Filtrar por corte de hoja
    if (characteristics.leafCut) {
      query.leafCut = characteristics.leafCut;
    }

    // Filtrar por origen geogr√°fico
    if (characteristics.origen) {
      query.origen = characteristics.origen;
    }

    // Filtrar por pa√≠s
    if (characteristics.pais) {
      query.pais = characteristics.pais;
    }

    // Filtrar por tipo de secado
    if (characteristics.secado) {
      query.secado = characteristics.secado;
    }

    // Filtrar por tipo de estacionamiento
    if (characteristics.tipoEstacionamiento) {
      query.tipoEstacionamiento = characteristics.tipoEstacionamiento;
    }

    // Filtrar por tiempo de estacionamiento
    if (characteristics.tiempoEstacionamiento) {
      query.tiempoEstacionamiento = characteristics.tiempoEstacionamiento;
    }

    // Filtrar por tipo de producci√≥n
    if (characteristics.produccion) {
      query.produccion = characteristics.produccion;
    }

    console.log('üîç Query construido para b√∫squeda de yerbas:', query);

    // Buscar yerbas que coincidan
    const yerbas = await Yerba.find(query).limit(10).sort({ puntuacion: -1 });

    // Si no hay coincidencias exactas, buscar coincidencias parciales
    if (yerbas.length === 0) {
      console.log('üîç No se encontraron coincidencias exactas. Iniciando b√∫squeda flexible...');
      
      // Estrategia de b√∫squeda flexible por orden de prioridad
      const flexibleSearches = [
        // 1. Por tipo y pa√≠s (m√°s probable que haya coincidencias)
        { 
          query: {
            ...(characteristics.tipo && { tipo: characteristics.tipo }),
            ...(characteristics.pais && { pais: characteristics.pais })
          },
          name: 'tipo + pa√≠s'
        },
        // 2. Solo por tipo (muy amplio)
        {
          query: characteristics.tipo ? { tipo: characteristics.tipo } : {},
          name: 'solo tipo'
        },
        // 3. Por pa√≠s y origen
        {
          query: {
            ...(characteristics.pais && { pais: characteristics.pais }),
            ...(characteristics.origen && { origen: characteristics.origen })
          },
          name: 'pa√≠s + origen'
        },
        // 4. Por contenido de palo y tipo de secado
        {
          query: {
            ...(characteristics.containsPalo !== undefined && { containsPalo: characteristics.containsPalo === 'S√≠' }),
            ...(characteristics.secado && { secado: characteristics.secado })
          },
          name: 'palo + secado'
        },
        // 5. Solo por pa√≠s
        {
          query: characteristics.pais ? { pais: characteristics.pais } : {},
          name: 'solo pa√≠s'
        }
      ];

      let flexibleResults = [];
      let usedStrategy = null;

      // Probar cada estrategia hasta encontrar resultados
      for (const strategy of flexibleSearches) {
        if (Object.keys(strategy.query).length > 0) {
          const results = await Yerba.find(strategy.query).limit(10).sort({ puntuacion: -1 });
          console.log(`üîç Estrategia "${strategy.name}" encontr√≥: ${results.length} resultados`);
          
          if (results.length > 0) {
            flexibleResults = results;
            usedStrategy = strategy.name;
            break;
          }
        }
      }

      // Si a√∫n no hay resultados, buscar las mejor puntuadas sin filtros
      if (flexibleResults.length === 0) {
        console.log('üîç No se encontraron coincidencias con criterios espec√≠ficos. Mostrando yerbas mejor puntuadas.');
        flexibleResults = await Yerba.find({}).limit(5).sort({ puntuacion: -1 });
        usedStrategy = 'mejor puntuadas (sin filtros)';
      }

      return res.json({
        success: true,
        data: {
          recommendations: flexibleResults,
          matchType: 'flexible',
          matchCriteria: characteristics,
          flexibleStrategy: usedStrategy,
          originalQuery: query,
          totalFound: flexibleResults.length,
          message: flexibleResults.length > 0 
            ? `No se encontraron coincidencias exactas, pero aqu√≠ tienes ${flexibleResults.length} yerbas similares usando la estrategia: ${usedStrategy}`
            : 'No se encontraron yerbas que coincidan con los criterios especificados'
        }
      });
    }

    res.json({
      success: true,
      data: {
        recommendations: yerbas,
        matchType: 'exact',
        matchCriteria: characteristics,
        query,
        totalFound: yerbas.length
      }
    });

  } catch (error) {
    console.error('‚ùå Error en /ai/recommend:', error);
    res.status(500).json({
      success: false,
      error: 'Error interno del servidor'
    });
  }
});

export default router;
